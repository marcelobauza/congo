var doc = new jsPDF();

flex_report_id = <%= @flex_report.id %>
tr_ids_array = <%= @tr_ids_array %>
total_reg = tr_ids_array.length

// Filtros
property_types = "<%= @property_types %>"
seller_types = '<%= @seller_types %>'
land_use = '<%= @land_use %>'
building_surfaces = '<%= @building_surfaces %>'
terrain_surfaces = '<%= @terrain_surfaces %>'
prices = '<%= @prices %>'
unit_prices = '<%= @unit_prices %>'

data = {
  flex_report_id: flex_report_id,
  transactions: tr_ids_array
};

console.log('Parámetros charts');
console.log(data);

path = window.location.pathname
if (path == '/es/flex/flex_reports/new') {
  url = 'search_data_for_charts'
} else {
  url = 'flex_reports/search_data_for_charts'
}
$.ajax({
  async: false,
  type: 'POST',
  url: url,
  datatype: 'json',
  data: data,
  success: function(data) {

    $('.hidden.charts').removeClass("d-none");

    console.log('Datos charts');
    console.log(data);

    $.each(data, function(i, chart) {

      var title = chart['title'];
      var series = chart['series'];
      var datasets = [];
      var serie_colour;
      //
      // console.log('-------------------------------------------------------->>'+title);

      $.each(series, function(a, b) {

        var label = b['name']
        var data = b['data']
        var name = [];
        var count = [];
        var radius = []
        var id = [];
        var name_colour = [];
        var colour;

        // Setea los colores dependiendo de la serie
        switch (label) {
            case 'Cantidad':
            case 'Promedio Bimestre':
              serie_colour = 'rgba(61, 64, 70, 0.9)'
              break;
            case 'Registros Base':
              serie_colour = 'rgba(44, 46, 52, 0.6)'
              break;
            case 'Promedio':
            case 'Promedio Muestra':
            case 'Registros Usuario':
              serie_colour = 'rgba(238, 95, 91, 0.9)'
              break;
            default:
              serie_colour = 'rgba(44, 46, 52, 0.6)'
              break;
          }


        if (title == 'Superficie por UF') {

          $.each(data, function(c, d) {
            name.push(d['name'])
            count.push({
              x: d['name'],
              y: d['count'],
              r: d['radius'] * 2
            });
          })

        } else {

          $.each(data, function(c, d) {
            name.push(d['name'])
            count.push(d['count'])
          })

        }


        if (title == 'Cantidad' || title == 'Superficie Útil' || title == 'Precio' || title == 'Precio Unitario' || title == 'Volúmen Mercado') {
          chart_type = 'line';
          datasets.push({
            label: label,
            data: count,
            fill: false,
            borderColor: serie_colour,
            borderWidth: 2,
            pointRadius: 0,
            pointStyle: 'line',
            lineTension: 0,
          })
        }

        if (title == 'Superficie Útil (barras)' || title == 'Precio (barras)' || title == 'Precio Unitario (barras)') {
          if (label == 'Registros Base') {
            datalabels = {
              anchor: 'center',
              align: 'center'
            }
          } else {
            datalabels = {
              anchor: 'end',
              align: 'end',
              offset: -5,
            }
          }
          chart_type = 'bar';
          datasets.push({
            label: label,
            data: count,
            borderColor: '#3d4046',
            borderWidth : 1,
            backgroundColor: serie_colour,
            datalabels: datalabels
          })
        }

        if (title == 'Superficie por UF') {
          chart_type = 'bubble';
          datasets.push({
            label: label,
            data: count,
            borderColor: '#3d4046',
            borderWidth : 1,
            backgroundColor: serie_colour,
          })
        }

        chart_data = {
          labels: name,
          datasets: datasets
        }

      })

      // Guardamos "options"
      if (chart_type == 'bar') { // Bar

        var chart_options = {
          animation: false,
          responsive: true,
          title: {
            display: false,
          },
          legend: {
            display: true,
            position: 'bottom',
            labels: {
              fontColor: '#3d4046',
              fontSize: 12,
              filter: function(legendItem, chartData) {
                // Solo muestra el legend si algunos de sus valores es diferente a 0
                if (chartData.datasets[legendItem.datasetIndex].data[0] != 0
                  || chartData.datasets[legendItem.datasetIndex].data[1] != 0
                  || chartData.datasets[legendItem.datasetIndex].data[2] != 0) {
                  return legendItem.text
                }
              }
            }
          },
          plugins: {
            datalabels: {
              font: {
                weight: 'bold',
                size: 12
              },
              color: '#FFFFFF',
              textStrokeColor: '#1B2631',
              textStrokeWidth: 1,
              textShadowColor: '#000000',
              textShadowBlur: 5,
              formatter: (value, ctx) => {
                // Mustra sólo los valores que estén por encima del 4%
                let sum = 0;
                let dataArr = ctx.dataset.data;
                dataArr.map(data => {
                    sum += data;
                });
                let percentage = (value*100 / sum).toFixed(2);
                if (percentage > 4) {
                  return value.toLocaleString('es-ES');
                } else {
                  return null;
                }
              },
            },
          },
          scales: {
            xAxes: [{
              stacked: true,
              ticks: {
                autoSkip: false,
                maxRotation: 12,
                fontSize: 10,
                fontColor: '#3d4046'
              }
            }],
            yAxes: [{
              stacked: true,
              ticks: {
                callback: function(label, index, labels) {
                  label = label.toLocaleString('es-ES')
                  return label;
                },
                beginAtZero: true,
                fontSize: 10,
                fontColor: '#3d4046'
              }
            }],
          }
        };

      } else if (chart_type == 'line') { // Line

        var chart_options = {
          animation: false,
          responsive: true,
          title: {
            display: false,
            text: title
          },
          legend: {
            display: true,
            position: 'bottom',
            labels: {
              fontColor: '#3d4046',
              fontSize: 12,
              usePointStyle: true,
            }
          },
          plugins: {
            datalabels: {
              formatter: function(value, context) {
                // Para Volúmen Mercado y Precio solo muestra datalabel de primer y última posición
                if (title == 'Volúmen Mercado' || title == 'Precio') {
                  final_pos = context.dataset.data.length - 1
                  // Solo muestra los valores > a 0 y que pertenezcan la primer serie
                  if (value > 0 && context.datasetIndex == 0 && (context.dataIndex == 0 || context.dataIndex == final_pos)) {
                    return value.toLocaleString('es-ES')
                  } else {
                    return null
                  }
                } else {
                  // Solo muestra los valores > a 0 y que pertenezcan la primer serie
                  if (value > 0 && context.datasetIndex == 0) {
                    return value.toLocaleString('es-ES')
                  } else {
                    return null
                  }
                }
              },
              align: 'start',
              anchor: 'start',
              color: '#3d4046',
              font: {
                size: 10
              },
            }
          },
          hover: {
            mode: 'point',
          },
          scales: {
            xAxes: [{
              ticks: {
                // fontColor: '#2c2e34'
              },
              gridLines: {
                // color: "#484b4f"
              },
            }],
            yAxes: [{
              ticks: {
                callback: function(label, index, labels) {
                  label = label.toLocaleString('es-ES')
                  return label;
                },
                beginAtZero: true,
                // fontColor: '#2c2e34'
              },
              gridLines: {
                // color: "#484b4f"
              },
            }],
          }
        };

      } else { // Bubble

        var chart_options = {
          animation: false,
          legend: {
            display: false
          },
          plugins: {
            datalabels: {
              display: false
            }
          }
        };


      } // Cierra else ("options")

      var chart_settings = {
        type: chart_type,
        data: chart_data,
        options: chart_options
      }

      var cantidadChartPDF = $("#chartCantidadPDF");
      var supUtilChartPDF = $("#chartSupUtilPDF");
      var precioChartPDF = $("#chartPrecioPDF");
      var precioUnitarioChartPDF = $("#chartPrecioUnitarioPDF");
      var volMercadoChartPDF = $("#chartVolMercadoPDF");
      var supUtilBarrasChartPDF = $("#chartSupUtil-barrasPDF");
      var precioBarrasChartPDF = $("#chartPrecio-barrasPDF");
      var precioUnitarioBarrasChartPDF = $("#chartPrecioUnitario-barrasPDF");
      var supUFChartPDF = $("#chartSupUFPDF");

      switch (i) {
        case 0:
          var final_chart = new Chart(cantidadChartPDF, chart_settings);
          cantidadChartPDF_img = final_chart.toBase64Image();
          break;
        case 1:
          var final_chart = new Chart(supUtilChartPDF, chart_settings);
          supUtilChartPDF_img = final_chart.toBase64Image();
          break;
        case 2:
          var final_chart = new Chart(precioChartPDF, chart_settings);
          precioChartPDF_img = final_chart.toBase64Image();
          break;
        case 3:
          var final_chart = new Chart(precioUnitarioChartPDF, chart_settings);
          precioUnitarioChartPDF_img = final_chart.toBase64Image();
          break;
        case 4:
          var final_chart = new Chart(volMercadoChartPDF, chart_settings);
          volMercadoChartPDF_img = final_chart.toBase64Image();
          break;
        case 5:
          var final_chart = new Chart(supUtilBarrasChartPDF, chart_settings);
          supUtilBarrasChartPDF_img = final_chart.toBase64Image();
          break;
        case 6:
          var final_chart = new Chart(precioBarrasChartPDF, chart_settings);
          precioBarrasChartPDF_img = final_chart.toBase64Image();
          break;
        case 7:
          var final_chart = new Chart(precioUnitarioBarrasChartPDF, chart_settings);
          precioUnitarioBarrasChartPDF_img = final_chart.toBase64Image();
          break;
        case 8:
          var final_chart = new Chart(supUFChartPDF, chart_settings);
          supUFChartPDF_img = final_chart.toBase64Image();
          break;
      }
      img_height = (final_chart.height * 70) / final_chart.width

    });

    // Levanta promedios
    var avg_cantidad = data[0]['series'][1]['data'][0]['count']
    var avg_sup_util = data[1]['series'][1]['data'][0]['count']
    var avg_precio = data[2]['series'][1]['data'][0]['count']
    var avg_precio_uni = data[3]['series'][1]['data'][0]['count']
    var avg_vol_mer = data[4]['series'][1]['data'][0]['count']

    // Pie de página
    function footer() {
      doc.setFontSize(8);
      doc.text('Inciti FLEX', 20, 290);
      doc.text('Registros: ' + total_reg, 190, 285, null, null, "right");
      doc.text('Pág. ' + doc.page, 190, 290, null, null, "right");
      doc.page++;
    };

    var doc = new jsPDF();

    doc.page = 1;

    doc.setFontSize(10.5);

    // Encabezado
    doc.text("Nombre: " + '<%= @user.complete_name %>', 30, 30);
    doc.text("Archivo: " + '<%= @flex_report.name %>', 30, 35);
    doc.text("Dirección: " + '<%= @user.address %>', 30, 40);
    doc.line(30, 42, 180, 42);

    // Filtros (izquierda)
    doc.text("Tipo de Propiedad: " + property_types, 30, 55);
    doc.text("Tipo de Vendedor: " + seller_types, 30, 60);
    doc.text("Zona Normativa: " + land_use, 30, 65);

    // Filtros (derecha)
    doc.text("Rango Util: " + building_surfaces + " m2", 30, 70);
    doc.text("Rango Terreno: " + terrain_surfaces + " m2", 30, 75);
    doc.text("Rango Precio: " + prices + " UF", 105, 70);
    doc.text("Rango UFm2 Util: " + unit_prices, 105, 75);




    // Gráficos (primera fila)
    doc.text("Cantidad Bimestral", 30, 90);
    doc.text("Promedio: " + avg_cantidad, 30, 95);
    doc.addImage(cantidadChartPDF_img, 'JPEG', 30, 100, 70, img_height);
    doc.text("Precio", 105, 90);
    doc.text("Promedio: UF " + avg_precio, 105, 95);
    doc.addImage(precioChartPDF_img, 'JPEG', 105, 100, 70, img_height);




    // Gráficos (segunda fila)
    doc.text("Superficie Útil", 30, 150);
    doc.text("Promedio: " + avg_sup_util + " m2", 30, 155);
    doc.addImage(supUtilChartPDF_img, 'JPEG', 30, 160, 70, img_height);
    doc.text("Precio Unitario Útil", 105, 150);
    doc.text("Promedio: " + avg_precio_uni + " UFm2", 105, 155);
    doc.addImage(precioUnitarioChartPDF_img, 'JPEG', 105, 160, 70, img_height);

    // Gráficos (tercera fila)
    doc.text("Volumen de Mercado (Uf miles)", 30, 215);
    doc.text("Promedio: " + avg_vol_mer, 30, 220);
    doc.addImage(volMercadoChartPDF_img, 'JPEG', 30, 225, 70, img_height);

    // Pie de página
    footer()

    // Agregamos un página
    doc.addPage('a4', 'portrait')
    doc.setFontSize(10.5);


    // Gráficos (primera fila)
    doc.text("Rangos Superficie Util", 30, 30);
    doc.addImage(supUtilBarrasChartPDF_img, 'JPEG', 30, 35, 70, img_height);
    doc.text("Dispersión Temporal", 105, 30);
    doc.addImage(supUFChartPDF_img, 'JPEG', 105, 35, 70, img_height);

    // Gráficos (segunda fila)
    doc.text("Rangos Precio Unitario Útil", 30, 90);
    doc.addImage(precioUnitarioBarrasChartPDF_img, 'JPEG', 30, 95, 70, img_height);
    doc.text("Rangos Precio (UF)", 105, 90);
    doc.addImage(precioBarrasChartPDF_img, 'JPEG', 105, 95, 70, img_height);

    // Comentarios
    doc.text("Comentarios", 30, 150);
    doc.setDrawColor(121, 128, 136);
    doc.rect(30, 155, 150, 100);
    line_row = 160
    for (var i = 0; i < 20; i++) {
      doc.line(30, line_row, 180, line_row);
      line_row += 5;
    }

    // Pie de página
    footer()

    // Descarga
    doc.save('Informe_Flex.pdf');
    $('.hidden.charts').addClass("d-none");

  },
  error: function(jqxhr, textstatus, errorthrown) {
    console.log("algo malo paso");
  }
});


// Ejemplo uso variables
// var asd = <%= @flex_report.id %>
// asd = asd.toString()
